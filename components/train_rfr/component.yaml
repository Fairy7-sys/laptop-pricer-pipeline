name: Train rfr
description: train a RandomForestRegressor with default parameters
inputs:
- {name: features, type: Dataset}
outputs:
- {name: model, type: Model}
implementation:
  container:
    image: python:3.10.7-slim
    command:
    - sh
    - -c
    - |2

      if ! [ -x "$(command -v pip)" ]; then
          python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip
      fi

      PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'pandas' 'scikit-learn' 'kfp==1.8.14' && "$0" "$@"
    - sh
    - -ec
    - |
      program_path=$(mktemp -d)
      printf "%s" "$0" > "$program_path/ephemeral_component.py"
      python3 -m kfp.v2.components.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"
    - "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing\
      \ import *\n\ndef train_rfr (features: Input[Dataset], model: Output[Model]):\n\
      \    '''train a RandomForestRegressor with default parameters'''\n    import\
      \ pandas as pd\n    from sklearn.model_selection import train_test_split\n \
      \   from sklearn.compose import ColumnTransformer\n    from sklearn.pipeline\
      \ import Pipeline\n    from sklearn.preprocessing import OneHotEncoder\n   \
      \ from sklearn.ensemble import RandomForestRegressor        \n    import pickle\
      \ \n    import logging \n\n    data = pd.read_csv(features.path+\".csv\")\n\
      \    # split into input (X) and output (y) variables\n    X = data.loc[:, [\"\
      Company\",\"TypeName\",\"Ram\",\"Weight\",\"TouchScreen\",\"IPS\",\"PPI\",\"\
      Cpu_brand\",\"HDD\",\"SSD\",\"Gpu brand\",\"os\"]].values\n    y = data.loc[:,\
      \ ['Price_euros']].values\n\n    # define model\n    step1 = ColumnTransformer(transformers=[\n\
      \    ('col_tnf',OneHotEncoder(sparse=False,drop='first'),[0,1,7,10,11])\n  \
      \  ],remainder='passthrough')\n\n    step2 = RandomForestRegressor(n_estimators=100,\n\
      \                              random_state=3,\n                           \
      \   max_samples=0.5,\n                              max_features=0.75,\n   \
      \                           max_depth=15)\n\n    pipe = Pipeline([\n       \
      \ ('step1',step1),\n        ('step2',step2)\n    ])\n\n    pipe.fit(X,y)\n\n\
      \    logging.info(\"Fitted model\")\n\n    #model_lr = LinearRegression()\n\
      \    #model_lr.fit(data.drop('Price_euros',axis=1), data['Price_euros'])\n \
      \   model.metadata[\"framework\"] = \"RFR\"\n    file_name = model.path + f\"\
      .pkl\"\n    with open(file_name, 'wb') as file:  \n        pickle.dump(pipe,\
      \ file)   \n\n"
    args:
    - --executor_input
    - {executorInput: null}
    - --function_to_execute
    - train_rfr
